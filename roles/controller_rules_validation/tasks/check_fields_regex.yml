- name: Init regex issues list
  ansible.builtin.set_fact:
    __regex_issue: []

- name: Extract objects with regex issue - {{ object_type }}
  ansible.builtin.set_fact:
    __regex_issue: "{{ __regex_issue + ([{'field_regex':field_regex.key, 'regex_value':field_regex.value, 'object_type':object_type}] | product(lookup('vars', __object_var_names[object_type]) | selectattr(field_regex.key, 'defined') | rejectattr(field_regex.key, 'regex', field_regex.value))) }}"
  loop: "{{ rule['fields_regex'] | dict2items }}"
  loop_control:
    loop_var: field_regex

- name: Update violation msgs with regex issue - {{ object_type }}
  ansible.builtin.set_fact:
    rules_violations_msgs: "{{ rules_violations_msgs +  [msg] }}"
    rules_violations_data: "{{ rules_violations_data +
        [{
          'rule_id': rule_id,
          'rule_index': rule_index,
          'rule_broken': 'fields_regex',
          'object_type': object_type,
          'object_scope': __scope[object_type],
          'object_organization': item[1]['organization'] | default('__undefined_org__'),
          'object_name': __object_name,
          'msg': msg
        }]
      }}"
  vars:
    msg: "Rule {{ rule_id }} | {{ __object_type }} | {{ __object_scope }} | {{ __object_name }} | The value of the field {{ __field }} ({{ __value }}) do not respect the regex ({{ __regex }})"
    __object_type: "{{ item[0]['object_type'] }}"
    __object_scope: "{{ item[1]['organization'] | default(__scope[object_type]) | default('__undefined_org__') }}"
    __object_name: "{{ item[1][__name_field[object_type]] | default(item[1]['user']) | default('__undefined_name__') }}" # TO BE CHECKED FOR ALTERNATIVE 'name' fileds
    __field: "{{ item[0]['field_regex'] }}"
    __value: "{{ item[1][item[0]['field_regex']] }}"
    __regex: "{{ item[0]['regex_value'] }}"
  loop: "{{ __regex_issue }}"
