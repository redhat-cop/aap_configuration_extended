- name: Check for ungrouped hosts
  when: rule['allow_ungrouped_hosts'] is defined
        and not rule['allow_ungrouped_hosts']
        and controller_groups is defined
        and controller_hosts is defined
  block:
    - name: Extract all and grouped hosts
      ansible.builtin.set_fact:
        __grouped_hosts: "{{ controller_groups | selectattr('hosts', 'defined') | map(attribute='hosts') | flatten | unique }}"
        __all_hosts: "{{ controller_hosts | map(attribute='name') | flatten | unique }}"

    - name: Extract ungrouped hosts
      ansible.builtin.set_fact:
        __ungrouped_hosts: "{{ __all_hosts | difference(__grouped_hosts) }}"

    - name: Update violations if ungrouped hosts found
      ansible.builtin.set_fact:
        rules_violations_msgs: "{{ rules_violations_msgs + [msg] }}"
        rules_violations_data: "{{ rules_violations_data +
            [{
              'rule_id': rule_id,
              'rule_index': rule_index,
              'rule_broken': 'allow_ungrouped_hosts',
              'object_type': 'hosts',
              'object_scope': 'global',
              'object_organization': '__organizationless__',
              'object_name': '__multiple_objects__',
              'msg': msg
            }]
          }}"
      vars:
        msg: "Rule {{ rule_id }} | hosts | global | {{ __ungrouped_hosts_names }} | Found {{ __ungrouped_hosts | length }} ungrouped hosts"
        __ungrouped_hosts_names: "{{ (__ungrouped_hosts[:3] | join(',') + '...') if (__ungrouped_hosts | length) > 3 else (__ungrouped_hosts | join(',')) }}"
      when: __ungrouped_hosts is defined
            and __ungrouped_hosts != None
            and __ungrouped_hosts | length > 0
