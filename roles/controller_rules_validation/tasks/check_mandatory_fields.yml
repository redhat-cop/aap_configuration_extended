- name: Init - {{ object_type }}
  ansible.builtin.set_fact:
    __defined_none: []
    __defined_empty: []
    __undefined: []

- name: Extract objects with mandatory defined but empty (None) fields - {{ object_type }}
  ansible.builtin.set_fact:
    __defined_none: "{{ __defined_none + [{'mandatory_field':mandatory_field, 'object_type': object_type}] | product(lookup('vars', __object_var_names[object_type]) | selectattr(mandatory_field, 'defined') | selectattr(mandatory_field, 'equalto', None)) }}"
  loop: "{{ rule['mandatory_fields'] }}"
  loop_control:
    loop_var: mandatory_field

- name: Extract objects with mandatory defined but contains empty string - {{ object_type }}
  ansible.builtin.set_fact:
    __defined_empty: "{{ __defined_empty + [{'mandatory_field':mandatory_field, 'object_type': object_type}] | product(lookup('vars', __object_var_names[object_type]) | selectattr(mandatory_field, 'defined') | selectattr(mandatory_field, 'equalto', '')) }}"
  loop: "{{ rule['mandatory_fields'] }}"
  loop_control:
    loop_var: mandatory_field

- name: Update violation msgs with mandatory defined but empty fields - {{ object_type }}
  ansible.builtin.set_fact:
    rules_violations_msgs: "{{ rules_violations_msgs + [msg] }}"
    rules_violations_data: "{{ rules_violations_data +
        [{
          'rule_id': rule_id,
          'rule_index': rule_index,
          'rule_broken': 'mandatory_fields',
          'object_type': object_type,
          'object_scope': __scope[object_type],
          'object_organization': __object_org,
          'object_name': __object_name,
          'msg': msg
        }]
      }}"
  vars:
    msg: "Rule {{ rule_id }} | {{ __object_type }} | {{ __object_scope }} | {{ __object_name }} | The mandatory field '{{ __field }}' is empty"
    __field: "{{ item[0]['mandatory_field'] }}"
    __object_type: "{{ item[0]['object_type'] }}"
    __object_scope: "{{ item[1]['organization'] | default(__scope[object_type]) | default('__undefined_org__') }}"
    __object_name: "{{ item[1][__name_field[object_type]] | default(item[1]['user']) | default('__undefined_name__') }}" # TO BE CHECKED FOR ALTERNATIVE 'name' fileds
    __object_org: "{{ item[1]['organization'] | default('__undefined_org__') }}"
  loop: "{{ __defined_empty + __defined_none }}"

- name: Extract objects with undefined mandatory fields - {{ object_type }}
  ansible.builtin.set_fact:
    __undefined: "{{ __undefined + [{'mandatory_field':mandatory_field, 'object_type': object_type}] | product(lookup('vars', __object_var_names[object_type]) | selectattr(mandatory_field, 'undefined')) }}"
  loop: "{{ rule['mandatory_fields'] }}"
  loop_control:
    loop_var: mandatory_field

- name: Update violation msgs with mandatory undefined fields - {{ object_type }}
  ansible.builtin.set_fact:
    rules_violations_msgs: "{{ rules_violations_msgs + [msg] }}"
    rules_violations_data: "{{ rules_violations_data +
        [{
          'rule_id': rule_id,
          'rule_index': rule_index,
          'rule_broken': 'mandatory_fields',
          'object_type': __object_type,
          'object_scope': __scope[object_type],
          'object_organization': __object_org,
          'object_name': __object_name,
          'msg': msg
        }]
      }}"
  vars:
    msg: "Rule {{ rule_id }} | {{ __object_type }} | {{ __object_scope }} | {{ __object_name }} | The mandatory field '{{ __field }}' is not defined"
    __field: "{{ item[0]['mandatory_field'] }}"
    __object_type: "{{ item[0]['object_type'] }}"
    __object_scope: "{{ item[1]['organization'] | default(__scope[object_type]) | default('__undefined_org__') }}"
    __object_name: "{{ item[1][__name_field[object_type]] | default(item[1]['user']) | default('__undefined_name__') }}" # TO BE CHECKED FOR ALTERNATIVE 'name' fields
    __object_org: "{{ item[1]['organization'] | default('__undefined_org__') }}"
  loop: "{{ __undefined }}"
