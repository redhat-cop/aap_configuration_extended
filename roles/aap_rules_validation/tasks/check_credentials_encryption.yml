---
- name: Init sensitive data list
  ansible.builtin.set_fact:
    __sensitive_data: []
    __unencrypted: []

- name: Set sensitive list
  ansible.builtin.set_fact:
    __sensitive_data: "{{ __sensitive_data + ([item.key] | product(item.value)) }}"
  with_dict: "{{ rule['credential_sensitive_data'] }}"

- name: Extract unencrypted credentials of all orgs
  ansible.builtin.set_fact:
    __unencrypted: "{{ __unencrypted + controller_credentials | selectattr('credential_type', 'defined') | selectattr('credential_type', 'equalto', sensitive_cred_type) | selectattr(sensitive_path, 'defined') | rejectattr(sensitive_path, 'vault_encrypted') | product([sensitive_path]) }}"
  vars:
    sensitive_cred_type: "{{ item[0] }}"
    sensitive_path: "inputs.{{ item[1] }}"
  loop: "{{ __sensitive_data }}"
  when: rule['organizations'] is not defined
        or rule['organizations'] == None
        or rule['organizations'] | length == 0

- name: Extract unencrypted credentials of rule's orgs
  ansible.builtin.set_fact:
    __unencrypted: "{{ __unencrypted + controller_credentials | selectattr('organization', 'defined') | selectattr('organization', 'in', rule['organizations']) | selectattr('credential_type', 'defined') | selectattr('credential_type', 'equalto', sensitive_cred_type) | selectattr(sensitive_path, 'defined') | rejectattr(sensitive_path, 'vault_encrypted') | product([sensitive_path]) }}"
  vars:
    sensitive_cred_type: "{{ item[0] }}"
    sensitive_path: "inputs.{{ item[1] }}"
  loop: "{{ __sensitive_data }}"
  when: rule['organizations'] is defined
        and rule['organizations'] != None
        and rule['organizations'] | length > 0

- name: Update rules violation regarding credentials encryption
  ansible.builtin.set_fact:
    rules_violations_msgs: "{{ (rules_violations_msgs + [msg]) }}"
    rules_violations_data: "{{ rules_violations_data +
        [{
          'rule_id': rule_id,
          'rule_index': rule_index,
          'rule_broken': 'encrypt_credentials_sensitive_data',
          'object_type': 'credentials',
          'object_scope': 'organizations',
          'object_organization': __cred_org,
          'object_name': __cred_name,
          'msg': msg
        }]
      }}"
  vars:
    msg: "Rule {{ rule_id }} | credentials | {{ __cred_org }} | {{ __cred_name }} | The credential sensitive field '{{ unencrypted_cred[1] }}' is not encrypted"
    __cred_name: "{{ unencrypted_cred[0]['name'] }}"
    __cred_org: "{{ unencrypted_cred[0]['organization'] | default('__undefined_org__') }}"
  loop: "{{ __unencrypted }}"
  loop_control:
    loop_var: unencrypted_cred
...
